proxy_cache_path /cache levels=1:2 keys_zone=cache:200m max_size=4g inactive=1d use_temp_path=off;

# TODO: gseng - review these values with the team
proxy_connect_timeout 30;
proxy_read_timeout 30;
proxy_send_timeout 30;

init_worker_by_lua_block {
    prometheus = require("prometheus").init("prometheus_metrics")

    metric_requests = prometheus:counter(
        "nginx_http_requests_total", "Number of HTTP requests", {"host", "status", "cache"})
    metric_latency = prometheus:histogram(
        "nginx_http_request_duration_seconds", "HTTP request latency", {"host"})
    metric_connections = prometheus:gauge(
        "nginx_http_connections", "Number of HTTP connections", {"state"})
}

map $request_method $is_purge {                                                             
    default   0;
    PURGE     1;
}

server {
    listen       8080;
    server_name  _;

    # define nginx variables
    set $do_not_cache 0;
    set $skip_reason "";
    set $bypass 0;

    # Cache GET and HEAD requests only
    proxy_cache_methods GET HEAD;

    proxy_cache_lock on;
    proxy_cache_lock_timeout 15s;

    # Some extra settings to maximize cache hits and efficiency
    proxy_force_ranges on;
    proxy_ignore_client_abort on;
    proxy_cache_revalidate on;

    # Should we hide/ignore headers from caching.
    proxy_hide_header      Set-Cookie;
    proxy_ignore_headers   Expires Set-Cookie;

    # Ignore the Cache-Control header from the upstream response
    proxy_ignore_headers Cache-Control;

    # Locations with CACHE - all other are just ignored
    # Match exactly the home page

    location ~* \b(api|service|_next|fonts|social-icons|basket|account|checkout|order|favicon|png)\b {
        proxy_redirect    off;
        proxy_pass http://test-backend-app:5000;

        proxy_set_header X-Real-IP  $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_pass_header Set-Cookie;

        add_header X-Cache-Status BYPASS;
        add_header X-Cache-ByPass-Reason NO-CACHE;
    }

    location / {
        proxy_redirect    off;
        proxy_pass http://test-backend-app:5000;

        proxy_set_header X-Real-IP  $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_pass_header Set-Cookie;

        proxy_cache cache;
        proxy_cache_valid  200 301 302 10m;

        proxy_intercept_errors on;

        if ($http_user_agent ~* '(Mobi|Android|iOS|iPhone|iPad|iPod|Windows Phone|BlackBerry|Opera Mini|IEMobile)') {
            set $mobile_page '1';
        }

        proxy_cache_key $mobile_page$uri$is_args$args;
        proxy_cache_bypass 0; # Cache these URLs
        proxy_no_cache 0; # Cache these URLs
        add_header X-Cache-Status $upstream_cache_status;
        add_header X-Cache-Mobile $mobile_page;
        add_header X-Cache-ByPass-Reason $skip_reason;

        if ($is_purge) {
            set $cache_key_to_purge $request_uri;

            content_by_lua_block {
                local exitStatus

                exitStatus = os.execute("/usr/local/bin/nginx-cache-purge purge /cache 1:2 '"..ngx.var.cache_key_to_purge.."'")

                if exitStatus then
                    ngx.status = ngx.HTTP_OK
                    ngx.say("Purge cache result was ok for '"..ngx.var.cache_key_to_purge.."'")
                else
                    ngx.status = ngx.HTTP_BAD_REQUEST
                    ngx.say("Purge cache status: "..(exitStatus and "success" or "failure"))
                end
                
                ngx.exit(ngx.status)
            }
        }

        log_by_lua_block {
            metric_requests:inc(1, {ngx.var.server_name, ngx.var.status, ngx.resp.get_headers()["X-Cache-Status"] == "HIT"})
            metric_latency:observe(tonumber(ngx.var.request_time), {ngx.var.server_name})
        }
    }

    location /metrics {
        content_by_lua_block {
            metric_connections:set(ngx.var.connections_reading, {"reading"})
            metric_connections:set(ngx.var.connections_waiting, {"waiting"})
            metric_connections:set(ngx.var.connections_writing, {"writing"})
            prometheus:collect()
        }
    }
}
